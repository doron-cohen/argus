/**
 * Generated by orval v6.31.0 🍺
 * Do not edit manually.
 * Argus Sync API
 * OpenAPI spec version: 0.1.0
 */
import { apiFetch } from '../../fetcher';
export interface Error {
  code?: string;
  message?: string;
}

export interface SyncTriggerResponse {
  message?: string;
  /** @minimum 0 */
  sourceId?: number;
  triggered?: boolean;
}

export type SyncStatusStatus = typeof SyncStatusStatus[keyof typeof SyncStatusStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SyncStatusStatus = {
  idle: 'idle',
  running: 'running',
  completed: 'completed',
  failed: 'failed',
} as const;

export interface SyncStatus {
  /** Number of components synced in last successful run */
  componentsCount?: number;
  /**
   * Duration of last sync operation
   * @nullable
   */
  duration?: string | null;
  /** @nullable */
  lastError?: string | null;
  /** @nullable */
  lastSync?: string | null;
  /** @minimum 0 */
  sourceId?: number;
  status?: SyncStatusStatus;
}

export interface FilesystemSourceConfig {
  basePath?: string;
  path?: string;
}

export interface GitSourceConfig {
  basePath?: string;
  branch?: string;
  url?: string;
}

export type SyncSourceType = typeof SyncSourceType[keyof typeof SyncSourceType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SyncSourceType = {
  git: 'git',
  filesystem: 'filesystem',
} as const;

export type SyncSourceConfig = GitSourceConfig | FilesystemSourceConfig;

export interface SyncSource {
  config?: SyncSourceConfig;
  /**
   * Unique identifier for the source (index-based)
   * @minimum 0
   */
  id?: number;
  /** Sync interval (e.g., "5m", "1h") */
  interval?: string;
  type?: SyncSourceType;
}



/**
 * @summary Get all sync sources
 */
export type getSyncSourcesResponse = {
  data: SyncSource[];
  status: number;
}

export const getGetSyncSourcesUrl = () => {


  return `/api/sync/v1/sources`
}

export const getSyncSources = async ( options?: RequestInit): Promise<getSyncSourcesResponse> => {
return apiFetch<Promise<getSyncSourcesResponse>>(getGetSyncSourcesUrl(),
  {      
    ...options,
    method: 'GET'
    
  }
);}


/**
 * @summary Get specific sync source details
 */
export type getSyncSourceResponse = {
  data: SyncSource;
  status: number;
}

export const getGetSyncSourceUrl = (id: number,) => {


  return `/api/sync/v1/sources/${id}`
}

export const getSyncSource = async (id: number, options?: RequestInit): Promise<getSyncSourceResponse> => {
return apiFetch<Promise<getSyncSourceResponse>>(getGetSyncSourceUrl(id),
  {      
    ...options,
    method: 'GET'
    
  }
);}


/**
 * @summary Get sync status for specific source
 */
export type getSyncSourceStatusResponse = {
  data: SyncStatus;
  status: number;
}

export const getGetSyncSourceStatusUrl = (id: number,) => {


  return `/api/sync/v1/sources/${id}/status`
}

export const getSyncSourceStatus = async (id: number, options?: RequestInit): Promise<getSyncSourceStatusResponse> => {
return apiFetch<Promise<getSyncSourceStatusResponse>>(getGetSyncSourceStatusUrl(id),
  {      
    ...options,
    method: 'GET'
    
  }
);}


/**
 * @summary Trigger manual sync for specific source
 */
export type triggerSyncSourceResponse = {
  data: SyncTriggerResponse;
  status: number;
}

export const getTriggerSyncSourceUrl = (id: number,) => {


  return `/api/sync/v1/sources/${id}/trigger`
}

export const triggerSyncSource = async (id: number, options?: RequestInit): Promise<triggerSyncSourceResponse> => {
return apiFetch<Promise<triggerSyncSourceResponse>>(getTriggerSyncSourceUrl(id),
  {      
    ...options,
    method: 'POST'
    
  }
);}


