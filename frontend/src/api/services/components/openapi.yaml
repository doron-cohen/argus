openapi: 3.0.3
info:
  title: Argus API
  version: 0.1.0
  description: API for managing and discovering components from various sources
servers:
  - url: /api/components/v1
paths:
  /components:
    get:
      summary: Get all components
      description: Retrieve a list of all components discovered from configured sources
      operationId: getComponents
      responses:
        "200":
          description: List of components
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Component"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /components/{componentId}:
    get:
      summary: Get component by ID
      description: Retrieve a specific component by its unique identifier
      operationId: getComponentById
      parameters:
        - name: componentId
          in: path
          required: true
          description: Unique identifier of the component
          schema:
            type: string
          example: "auth-service"
      responses:
        "200":
          description: Component details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Component"
        "404":
          description: Component not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /components/{componentId}/reports:
    get:
      summary: Get reports for component
      description: Retrieve quality check reports for a specific component
      operationId: getComponentReports
      parameters:
        - name: componentId
          in: path
          required: true
          description: Unique identifier of the component
          schema:
            type: string
          example: "auth-service"
        - name: status
          in: query
          required: false
          description: Filter by check status
          schema:
            type: string
            enum: [
              "pass",
              "fail",
              "disabled",
              "skipped",
              "unknown",
              "error",
              "completed",
            ]
          example: "pass"
        - name: check_slug
          in: query
          required: false
          description: Filter by specific check type
          schema:
            type: string
          example: "unit-tests"
        - name: since
          in: query
          required: false
          description: Filter reports since timestamp (ISO 8601)
          schema:
            type: string
            format: date-time
          example: "2024-01-01T00:00:00Z"
        - name: limit
          in: query
          required: false
          description: Number of reports to return
          schema:
            type: integer
            minimum: 1
            maximum: 100
          example: 50
        - name: offset
          in: query
          required: false
          description: Pagination offset
          schema:
            type: integer
            minimum: 0
            default: 0
          example: 0
        - name: latest_per_check
          in: query
          required: false
          description: Return only the latest report for each check type
          schema:
            type: boolean
          example: true
      responses:
        "200":
          description: Component reports
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ComponentReportsResponse"
        "404":
          description: Component not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    Component:
      type: object
      description: A component discovered from a source
      properties:
        id:
          type: string
          description: Unique identifier for the component. If not provided, the name will be used as the identifier.
          example: "auth-service"
        name:
          type: string
          description: Human-readable name of the component
          example: "Authentication Service"
        description:
          type: string
          description: Additional context about the component's purpose and functionality
          example: "Handles user authentication and authorization"
        owners:
          $ref: "#/components/schemas/Owners"
      required:
        - name
    Owners:
      type: object
      description: Ownership information for a component
      properties:
        maintainers:
          type: array
          description: List of user identifiers responsible for maintaining this component
          items:
            type: string
          example: ["alice@company.com", "@bob-github"]
        team:
          type: string
          description: Team responsible for owning this component
          example: "Platform Team"
    ComponentReportsResponse:
      type: object
      description: Response containing component reports with pagination
      properties:
        reports:
          type: array
          description: List of check reports for the component
          items:
            $ref: "#/components/schemas/CheckReport"
        pagination:
          $ref: "#/components/schemas/Pagination"
      required:
        - reports
        - pagination
    Pagination:
      type: object
      description: Pagination metadata for list responses
      properties:
        total:
          type: integer
          description: Total number of items available
          example: 150
        limit:
          type: integer
          description: Number of items returned in this response
          example: 50
        offset:
          type: integer
          description: Offset used for this response
          example: 0
        has_more:
          type: boolean
          description: Whether there are more items available
          example: true
      required:
        - total
        - limit
        - offset
        - has_more
    CheckReport:
      type: object
      description: A quality check report for a component
      properties:
        id:
          type: string
          description: Unique identifier for the report
          example: "550e8400-e29b-41d4-a716-446655440000"
        check_slug:
          type: string
          description: Unique identifier for the check type
          example: "unit-tests"
        status:
          type: string
          description: Status of the check execution
          enum: [
            "pass",
            "fail",
            "disabled",
            "skipped",
            "unknown",
            "error",
            "completed",
          ]
          example: "pass"
        timestamp:
          type: string
          format: date-time
          description: When the check was executed
          example: "2024-01-15T10:30:00Z"
      required:
        - id
        - check_slug
        - status
        - timestamp
    Health:
      type: object
      description: Health status of the service
      properties:
        status:
          type: string
          description: Health status
          enum: ["healthy", "unhealthy"]
          example: "healthy"
        timestamp:
          type: string
          format: date-time
          description: Timestamp of the health check
          example: "2023-12-01T10:00:00Z"
      required:
        - status
        - timestamp
    Error:
      type: object
      description: Error response
      properties:
        error:
          type: string
          description: Error message
          example: "Internal server error"
        code:
          type: string
          description: Error code
          example: "INTERNAL_ERROR"
      required:
        - error
