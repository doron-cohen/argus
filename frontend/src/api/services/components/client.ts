/**
 * Generated by orval v6.31.0 🍺
 * Do not edit manually.
 * Argus API
 * API for managing and discovering components from various sources
 * OpenAPI spec version: 0.1.0
 */
export type GetComponentReportsStatus = typeof GetComponentReportsStatus[keyof typeof GetComponentReportsStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetComponentReportsStatus = {
  pass: 'pass',
  fail: 'fail',
  disabled: 'disabled',
  skipped: 'skipped',
  unknown: 'unknown',
  error: 'error',
  completed: 'completed',
} as const;

export type GetComponentReportsParams = {
/**
 * Filter by check status
 */
status?: GetComponentReportsStatus;
/**
 * Filter by specific check type
 */
check_slug?: string;
/**
 * Filter reports since timestamp (ISO 8601)
 */
since?: string;
/**
 * Number of reports to return
 */
limit?: number;
/**
 * Pagination offset
 */
offset?: number;
/**
 * Return only the latest report for each check type
 */
latest_per_check?: boolean;
};

/**
 * Error response
 */
export interface Error {
  /** Error code */
  code?: string;
  /** Error message */
  error: string;
}

/**
 * Health status
 */
export type HealthStatus = typeof HealthStatus[keyof typeof HealthStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const HealthStatus = {
  healthy: 'healthy',
  unhealthy: 'unhealthy',
} as const;

/**
 * Health status of the service
 */
export interface Health {
  /** Health status */
  status: HealthStatus;
  /** Timestamp of the health check */
  timestamp: string;
}

/**
 * Status of the check execution
 */
export type CheckReportStatus = typeof CheckReportStatus[keyof typeof CheckReportStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CheckReportStatus = {
  pass: 'pass',
  fail: 'fail',
  disabled: 'disabled',
  skipped: 'skipped',
  unknown: 'unknown',
  error: 'error',
  completed: 'completed',
} as const;

/**
 * A quality check report for a component
 */
export interface CheckReport {
  /** Unique identifier for the check type */
  check_slug: string;
  /** Unique identifier for the report */
  id: string;
  /** Status of the check execution */
  status: CheckReportStatus;
  /** When the check was executed */
  timestamp: string;
}

/**
 * Pagination metadata for list responses
 */
export interface Pagination {
  /** Whether there are more items available */
  has_more: boolean;
  /** Number of items returned in this response */
  limit: number;
  /** Offset used for this response */
  offset: number;
  /** Total number of items available */
  total: number;
}

/**
 * Response containing component reports with pagination
 */
export interface ComponentReportsResponse {
  pagination: Pagination;
  /** List of check reports for the component */
  reports: CheckReport[];
}

/**
 * Ownership information for a component
 */
export interface Owners {
  /** List of user identifiers responsible for maintaining this component */
  maintainers?: string[];
  /** Team responsible for owning this component */
  team?: string;
}

/**
 * A component discovered from a source
 */
export interface Component {
  /** Additional context about the component's purpose and functionality */
  description?: string;
  /** Unique identifier for the component. If not provided, the name will be used as the identifier. */
  id?: string;
  /** Human-readable name of the component */
  name: string;
  owners?: Owners;
}



/**
 * Retrieve a list of all components discovered from configured sources
 * @summary Get all components
 */
export type getComponentsResponse = {
  data: Component[];
  status: number;
}

export const getGetComponentsUrl = () => {


  return `/components`
}

export const getComponents = async ( options?: RequestInit): Promise<getComponentsResponse> => {
  const res = await fetch(getGetComponentsUrl(),
  {      
    ...options,
    method: 'GET'
    
  }

  )
  const data = await res.json()

  return { status: res.status, data }
}


/**
 * Retrieve a specific component by its unique identifier
 * @summary Get component by ID
 */
export type getComponentByIdResponse = {
  data: Component;
  status: number;
}

export const getGetComponentByIdUrl = (componentId: string,) => {


  return `/components/${componentId}`
}

export const getComponentById = async (componentId: string, options?: RequestInit): Promise<getComponentByIdResponse> => {
  const res = await fetch(getGetComponentByIdUrl(componentId),
  {      
    ...options,
    method: 'GET'
    
  }

  )
  const data = await res.json()

  return { status: res.status, data }
}


/**
 * Retrieve quality check reports for a specific component
 * @summary Get reports for component
 */
export type getComponentReportsResponse = {
  data: ComponentReportsResponse;
  status: number;
}

export const getGetComponentReportsUrl = (componentId: string,
    params?: GetComponentReportsParams,) => {

  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value === null) {
      normalizedParams.append(key, 'null');
    } else if (value !== undefined) {
      normalizedParams.append(key, value.toString());
    }
  });

  return `/components/${componentId}/reports?${normalizedParams.toString()}`
}

export const getComponentReports = async (componentId: string,
    params?: GetComponentReportsParams, options?: RequestInit): Promise<getComponentReportsResponse> => {
  const res = await fetch(getGetComponentReportsUrl(componentId,params),
  {      
    ...options,
    method: 'GET'
    
  }

  )
  const data = await res.json()

  return { status: res.status, data }
}


