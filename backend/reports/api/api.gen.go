// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// Defines values for ReportSubmissionStatus.
const (
	ReportSubmissionStatusCompleted ReportSubmissionStatus = "completed"
	ReportSubmissionStatusDisabled  ReportSubmissionStatus = "disabled"
	ReportSubmissionStatusError     ReportSubmissionStatus = "error"
	ReportSubmissionStatusFail      ReportSubmissionStatus = "fail"
	ReportSubmissionStatusPass      ReportSubmissionStatus = "pass"
	ReportSubmissionStatusSkipped   ReportSubmissionStatus = "skipped"
	ReportSubmissionStatusUnknown   ReportSubmissionStatus = "unknown"
)

// Error Error response
type Error struct {
	// Code Error code
	Code *string `json:"code,omitempty"`

	// Details Additional error details
	Details *map[string]interface{} `json:"details,omitempty"`

	// Error Error message
	Error string `json:"error"`
}

// ReportSubmission A quality check report submission
type ReportSubmission struct {
	// CheckSlug Unique identifier for the check type (e.g., "unit-tests", "build", "linter")
	CheckSlug string `json:"check_slug"`

	// ComponentId Unique identifier of the component being reported on
	ComponentId string `json:"component_id"`

	// Details Check-specific data (coverage %, warnings, etc.)
	Details *map[string]interface{} `json:"details,omitempty"`

	// Metadata Execution context (CI job, environment, duration)
	Metadata *map[string]interface{} `json:"metadata,omitempty"`

	// Status Status of the check execution
	Status ReportSubmissionStatus `json:"status"`

	// Timestamp When the check was executed
	Timestamp time.Time `json:"timestamp"`
}

// ReportSubmissionStatus Status of the check execution
type ReportSubmissionStatus string

// ReportSubmissionResponse Response to a successful report submission
type ReportSubmissionResponse struct {
	// Message Success message
	Message string `json:"message"`

	// ReportId Unique identifier for the submitted report
	ReportId *string `json:"report_id,omitempty"`

	// Timestamp When the report was received
	Timestamp time.Time `json:"timestamp"`
}

// SubmitReportJSONRequestBody defines body for SubmitReport for application/json ContentType.
type SubmitReportJSONRequestBody = ReportSubmission

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Submit a quality check report
	// (POST /reports)
	SubmitReport(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Submit a quality check report
// (POST /reports)
func (_ Unimplemented) SubmitReport(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// SubmitReport operation middleware
func (siw *ServerInterfaceWrapper) SubmitReport(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SubmitReport(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/reports", wrapper.SubmitReport)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xX32/bNhD+V4jbBrSA7NCOlXV6S7s+GCjWwm03YOsg0NTZZiqRCkm5yQL/78NRkmVb",
	"WuMW7d5k+X58vPvuPuoBpClKo1F7B8kDOLnBQoTHl9YaSw8ZOmlV6ZXRkNSvmUVXGu0QIiitKdF6hcFL",
	"mgz/yyn8FwHeiaLMERL4/frV/Nfrd/PXv6UvF4vXC4jA35f0j/NW6TXsIsjQC5WH2CLLFAUU+ZuDnN5W",
	"GJ3ku95bMgyp2ygH2R9gpTDPIAG5QfkxdXm1hggsChdiLPC2UhYzFsyYcqxQzjWoGphmeYPS0wv8XLUK",
	"dE6sj88+11uRq4xZvK3QeZYJL/rn3xGgGgckfzVZ/h7Iv8DSWP+2WgaQlPsUyjW7rUSu/D0L52U2eDDX",
	"ufR62dWlF+29VrcVMpWh9mql0LKVscxvsIlOANkTHK/HEfsAlVZ+5NF59wHo97JSeVY/5kp7tB/g6VF1",
	"OgeIoBB3r1Cv/QaSCecRFErvfw8wZs/oVGXnADerGnfrxpao9LqpD2YsVKaDJiq/GTm0WyXxGNw0jh8F",
	"91V0fkElHbkSpVopGajCnkizRSvWyH6K2CdhtdJrFzH0cvz0mOatYVqilag9MTF5Fo/jCLLKCsqROpRG",
	"Zw6SWRxBqHu6Eion1vH2RSmcoxeTmA9NQIFeBBJ/0dFe3qGs6JlJoz3eefbkxZzdmGXEUG+VNbpA7SPW",
	"Ij0529IKLTeQQCEUtUmq9MYsQ+NhMr2cxRD4UCifuo2g7i3lZHpJQbrooUFiTR2i4A2gdF+cItSF88Fj",
	"Oy985fo8exve78kVhmIfO+SvChppqipEQNWGCDLlxJLKHoH7qMoyPFX6ozafglOY/5riOXrMaBd01Gxi",
	"9UjnVYHOi6Lsw/xjg/oA4SfhGpQhcxd6yqezEZ+MJvG7CU8uecL5nwTb2EJQATPhcUR5Ht1hR9v2aFb3",
	"xTxEfM6yW7Rq1Dte+w/zhgnmKinRuVWVn7H92qXd72wdZXCrLw7CeloeXcr8fqg1NY4zN1W7YrvwtfsR",
	"hDjm+GzG+QinvyxHs0k2G4mfJ1ej2ezqKo5nM845/1qSNFUjlliUqLbfjSVdcT9HBfJSemUG1O7NPJSr",
	"KRUt9CH5c8Ho4A5E+Xw4y7VdV44tGrPrN3OIYIu2Flfg48mYU9lMiVqUChK4HPMxbZZS+E1g0EWTg55L",
	"4/wQlQgdE21hCYw4AVqipfoFIWKiwwohd72i5tk+2KJlRHOxeG6y+1oFtA+77gFEWeZKBseLG1ffFZoe",
	"BqxBndOGWv0rTW1Jm02wYDo4TK4qCmHvIYHnwWaPayvyCk+vF3XO04XQE9tD9bRerYT0qVP/YFosSZfG",
	"06gB3xe2yZSTf4k6Qy0VulSaiuoxi0/E6zFNuTpTU0prskq2635YViZTXutKKyP7Hd5N4+lUxWGqiPp0",
	"S0pJnM9rFpkzMn+kYe/J7h3ZPdK0o1va2Z37PveRL+ngN78VfEH3eNM98gofWwT4R4srSOCHi24TXTSf",
	"Yhe9m/3ueFfSrSq8qJUulHjK+Rkz/3X592IbcJzK7efkbxfB7BsCqz9QB1AMflrtIoj/n+QeLX14EvfR",
	"1t+fYVq7Aduv/SFJoqC7fwMAAP//w07fSpgPAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
