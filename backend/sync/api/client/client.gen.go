// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package client

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
)

// Defines values for SyncSourceType.
const (
	Filesystem SyncSourceType = "filesystem"
	Git        SyncSourceType = "git"
)

// Defines values for SyncStatusStatus.
const (
	Completed SyncStatusStatus = "completed"
	Failed    SyncStatusStatus = "failed"
	Idle      SyncStatusStatus = "idle"
	Running   SyncStatusStatus = "running"
)

// Error defines model for Error.
type Error struct {
	Code    *string `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
}

// FilesystemSourceConfig defines model for FilesystemSourceConfig.
type FilesystemSourceConfig struct {
	BasePath *string `json:"basePath,omitempty"`
	Path     *string `json:"path,omitempty"`
}

// GitSourceConfig defines model for GitSourceConfig.
type GitSourceConfig struct {
	BasePath *string `json:"basePath,omitempty"`
	Branch   *string `json:"branch,omitempty"`
	Url      *string `json:"url,omitempty"`
}

// SyncSource defines model for SyncSource.
type SyncSource struct {
	Config *SyncSource_Config `json:"config,omitempty"`

	// Id Unique identifier for the source (index-based)
	Id *int `json:"id,omitempty"`

	// Interval Sync interval (e.g., "5m", "1h")
	Interval *string         `json:"interval,omitempty"`
	Type     *SyncSourceType `json:"type,omitempty"`
}

// SyncSource_Config defines model for SyncSource.Config.
type SyncSource_Config struct {
	union json.RawMessage
}

// SyncSourceType defines model for SyncSource.Type.
type SyncSourceType string

// SyncStatus defines model for SyncStatus.
type SyncStatus struct {
	// ComponentsCount Number of components synced in last successful run
	ComponentsCount *int `json:"componentsCount,omitempty"`

	// Duration Duration of last sync operation
	Duration  *string           `json:"duration"`
	LastError *string           `json:"lastError"`
	LastSync  *time.Time        `json:"lastSync"`
	SourceId  *int              `json:"sourceId,omitempty"`
	Status    *SyncStatusStatus `json:"status,omitempty"`
}

// SyncStatusStatus defines model for SyncStatus.Status.
type SyncStatusStatus string

// SyncTriggerResponse defines model for SyncTriggerResponse.
type SyncTriggerResponse struct {
	Message   *string `json:"message,omitempty"`
	SourceId  *int    `json:"sourceId,omitempty"`
	Triggered *bool   `json:"triggered,omitempty"`
}

// AsGitSourceConfig returns the union data inside the SyncSource_Config as a GitSourceConfig
func (t SyncSource_Config) AsGitSourceConfig() (GitSourceConfig, error) {
	var body GitSourceConfig
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGitSourceConfig overwrites any union data inside the SyncSource_Config as the provided GitSourceConfig
func (t *SyncSource_Config) FromGitSourceConfig(v GitSourceConfig) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGitSourceConfig performs a merge with any union data inside the SyncSource_Config, using the provided GitSourceConfig
func (t *SyncSource_Config) MergeGitSourceConfig(v GitSourceConfig) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsFilesystemSourceConfig returns the union data inside the SyncSource_Config as a FilesystemSourceConfig
func (t SyncSource_Config) AsFilesystemSourceConfig() (FilesystemSourceConfig, error) {
	var body FilesystemSourceConfig
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFilesystemSourceConfig overwrites any union data inside the SyncSource_Config as the provided FilesystemSourceConfig
func (t *SyncSource_Config) FromFilesystemSourceConfig(v FilesystemSourceConfig) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFilesystemSourceConfig performs a merge with any union data inside the SyncSource_Config, using the provided FilesystemSourceConfig
func (t *SyncSource_Config) MergeFilesystemSourceConfig(v FilesystemSourceConfig) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t SyncSource_Config) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SyncSource_Config) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetSyncSources request
	GetSyncSources(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSyncSource request
	GetSyncSource(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSyncSourceStatus request
	GetSyncSourceStatus(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TriggerSyncSource request
	TriggerSyncSource(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetSyncSources(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSyncSourcesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSyncSource(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSyncSourceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSyncSourceStatus(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSyncSourceStatusRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TriggerSyncSource(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTriggerSyncSourceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetSyncSourcesRequest generates requests for GetSyncSources
func NewGetSyncSourcesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sources")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSyncSourceRequest generates requests for GetSyncSource
func NewGetSyncSourceRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sources/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSyncSourceStatusRequest generates requests for GetSyncSourceStatus
func NewGetSyncSourceStatusRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sources/%s/status", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTriggerSyncSourceRequest generates requests for TriggerSyncSource
func NewTriggerSyncSourceRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sources/%s/trigger", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetSyncSourcesWithResponse request
	GetSyncSourcesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSyncSourcesResponse, error)

	// GetSyncSourceWithResponse request
	GetSyncSourceWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetSyncSourceResponse, error)

	// GetSyncSourceStatusWithResponse request
	GetSyncSourceStatusWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetSyncSourceStatusResponse, error)

	// TriggerSyncSourceWithResponse request
	TriggerSyncSourceWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*TriggerSyncSourceResponse, error)
}

type GetSyncSourcesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SyncSource
}

// Status returns HTTPResponse.Status
func (r GetSyncSourcesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSyncSourcesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSyncSourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SyncSource
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetSyncSourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSyncSourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSyncSourceStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SyncStatus
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetSyncSourceStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSyncSourceStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TriggerSyncSourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *SyncTriggerResponse
	JSON404      *Error
	JSON409      *Error
}

// Status returns HTTPResponse.Status
func (r TriggerSyncSourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TriggerSyncSourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetSyncSourcesWithResponse request returning *GetSyncSourcesResponse
func (c *ClientWithResponses) GetSyncSourcesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSyncSourcesResponse, error) {
	rsp, err := c.GetSyncSources(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSyncSourcesResponse(rsp)
}

// GetSyncSourceWithResponse request returning *GetSyncSourceResponse
func (c *ClientWithResponses) GetSyncSourceWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetSyncSourceResponse, error) {
	rsp, err := c.GetSyncSource(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSyncSourceResponse(rsp)
}

// GetSyncSourceStatusWithResponse request returning *GetSyncSourceStatusResponse
func (c *ClientWithResponses) GetSyncSourceStatusWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetSyncSourceStatusResponse, error) {
	rsp, err := c.GetSyncSourceStatus(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSyncSourceStatusResponse(rsp)
}

// TriggerSyncSourceWithResponse request returning *TriggerSyncSourceResponse
func (c *ClientWithResponses) TriggerSyncSourceWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*TriggerSyncSourceResponse, error) {
	rsp, err := c.TriggerSyncSource(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTriggerSyncSourceResponse(rsp)
}

// ParseGetSyncSourcesResponse parses an HTTP response from a GetSyncSourcesWithResponse call
func ParseGetSyncSourcesResponse(rsp *http.Response) (*GetSyncSourcesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSyncSourcesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SyncSource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSyncSourceResponse parses an HTTP response from a GetSyncSourceWithResponse call
func ParseGetSyncSourceResponse(rsp *http.Response) (*GetSyncSourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSyncSourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SyncSource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetSyncSourceStatusResponse parses an HTTP response from a GetSyncSourceStatusWithResponse call
func ParseGetSyncSourceStatusResponse(rsp *http.Response) (*GetSyncSourceStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSyncSourceStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SyncStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseTriggerSyncSourceResponse parses an HTTP response from a TriggerSyncSourceWithResponse call
func ParseTriggerSyncSourceResponse(rsp *http.Response) (*TriggerSyncSourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TriggerSyncSourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest SyncTriggerResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}
