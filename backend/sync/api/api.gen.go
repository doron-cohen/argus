// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

// Defines values for SyncSourceType.
const (
	Filesystem SyncSourceType = "filesystem"
	Git        SyncSourceType = "git"
)

// Defines values for SyncStatusStatus.
const (
	Completed SyncStatusStatus = "completed"
	Failed    SyncStatusStatus = "failed"
	Idle      SyncStatusStatus = "idle"
	Running   SyncStatusStatus = "running"
)

// Error defines model for Error.
type Error struct {
	Code    *string `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
}

// FilesystemSourceConfig defines model for FilesystemSourceConfig.
type FilesystemSourceConfig struct {
	BasePath *string `json:"basePath,omitempty"`
	Path     *string `json:"path,omitempty"`
}

// GitSourceConfig defines model for GitSourceConfig.
type GitSourceConfig struct {
	BasePath *string `json:"basePath,omitempty"`
	Branch   *string `json:"branch,omitempty"`
	Url      *string `json:"url,omitempty"`
}

// SyncSource defines model for SyncSource.
type SyncSource struct {
	Config *SyncSource_Config `json:"config,omitempty"`

	// Id Unique identifier for the source (index-based)
	Id *int `json:"id,omitempty"`

	// Interval Sync interval (e.g., "5m", "1h")
	Interval *string         `json:"interval,omitempty"`
	Type     *SyncSourceType `json:"type,omitempty"`
}

// SyncSource_Config defines model for SyncSource.Config.
type SyncSource_Config struct {
	union json.RawMessage
}

// SyncSourceType defines model for SyncSource.Type.
type SyncSourceType string

// SyncStatus defines model for SyncStatus.
type SyncStatus struct {
	// ComponentsCount Number of components synced in last successful run
	ComponentsCount *int `json:"componentsCount,omitempty"`

	// Duration Duration of last sync operation
	Duration  *string           `json:"duration"`
	LastError *string           `json:"lastError"`
	LastSync  *time.Time        `json:"lastSync"`
	SourceId  *int              `json:"sourceId,omitempty"`
	Status    *SyncStatusStatus `json:"status,omitempty"`
}

// SyncStatusStatus defines model for SyncStatus.Status.
type SyncStatusStatus string

// SyncTriggerResponse defines model for SyncTriggerResponse.
type SyncTriggerResponse struct {
	Message   *string `json:"message,omitempty"`
	SourceId  *int    `json:"sourceId,omitempty"`
	Triggered *bool   `json:"triggered,omitempty"`
}

// AsGitSourceConfig returns the union data inside the SyncSource_Config as a GitSourceConfig
func (t SyncSource_Config) AsGitSourceConfig() (GitSourceConfig, error) {
	var body GitSourceConfig
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGitSourceConfig overwrites any union data inside the SyncSource_Config as the provided GitSourceConfig
func (t *SyncSource_Config) FromGitSourceConfig(v GitSourceConfig) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGitSourceConfig performs a merge with any union data inside the SyncSource_Config, using the provided GitSourceConfig
func (t *SyncSource_Config) MergeGitSourceConfig(v GitSourceConfig) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsFilesystemSourceConfig returns the union data inside the SyncSource_Config as a FilesystemSourceConfig
func (t SyncSource_Config) AsFilesystemSourceConfig() (FilesystemSourceConfig, error) {
	var body FilesystemSourceConfig
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFilesystemSourceConfig overwrites any union data inside the SyncSource_Config as the provided FilesystemSourceConfig
func (t *SyncSource_Config) FromFilesystemSourceConfig(v FilesystemSourceConfig) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFilesystemSourceConfig performs a merge with any union data inside the SyncSource_Config, using the provided FilesystemSourceConfig
func (t *SyncSource_Config) MergeFilesystemSourceConfig(v FilesystemSourceConfig) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t SyncSource_Config) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SyncSource_Config) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all sync sources
	// (GET /sources)
	GetSyncSources(w http.ResponseWriter, r *http.Request)
	// Get specific sync source details
	// (GET /sources/{id})
	GetSyncSource(w http.ResponseWriter, r *http.Request, id int)
	// Get sync status for specific source
	// (GET /sources/{id}/status)
	GetSyncSourceStatus(w http.ResponseWriter, r *http.Request, id int)
	// Trigger manual sync for specific source
	// (POST /sources/{id}/trigger)
	TriggerSyncSource(w http.ResponseWriter, r *http.Request, id int)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Get all sync sources
// (GET /sources)
func (_ Unimplemented) GetSyncSources(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get specific sync source details
// (GET /sources/{id})
func (_ Unimplemented) GetSyncSource(w http.ResponseWriter, r *http.Request, id int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get sync status for specific source
// (GET /sources/{id}/status)
func (_ Unimplemented) GetSyncSourceStatus(w http.ResponseWriter, r *http.Request, id int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Trigger manual sync for specific source
// (POST /sources/{id}/trigger)
func (_ Unimplemented) TriggerSyncSource(w http.ResponseWriter, r *http.Request, id int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetSyncSources operation middleware
func (siw *ServerInterfaceWrapper) GetSyncSources(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSyncSources(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSyncSource operation middleware
func (siw *ServerInterfaceWrapper) GetSyncSource(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSyncSource(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSyncSourceStatus operation middleware
func (siw *ServerInterfaceWrapper) GetSyncSourceStatus(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSyncSourceStatus(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// TriggerSyncSource operation middleware
func (siw *ServerInterfaceWrapper) TriggerSyncSource(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TriggerSyncSource(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/sources", wrapper.GetSyncSources)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/sources/{id}", wrapper.GetSyncSource)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/sources/{id}/status", wrapper.GetSyncSourceStatus)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/sources/{id}/trigger", wrapper.TriggerSyncSource)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RWTY/bNhD9K8S0hxRQbOejh+oWpG0QoGiDbnvK7oEWR9oJ+KEMyaCGof9ekJQs19a6",
	"DhI0zcmE+PFm3nt89B4aZ3pn0QYP9R58c49G5uFPzI7ToGfXIwfC/LlxCtNv2PUINfjAZDsYKjDoveyW",
	"5oZq+uK277AJafXPpNHvfEBz4yI3+NLZlrpzuK30+EaG+0XIfnliCe8VhU8A2rK0zfJUZH1lCTc725Qa",
	"llidqnIWf2uhfruHbxlbqOGb9SzRetRnfdrOUF1e/wDdw91QAamEq9A3TH0gZ6GGPy29jyhIoQ3UErJo",
	"HYtwj8Ln/eIRWYV/PU6sqe+gAkOWTDRQbw6dkw3YIafW05A/SH0OlEgR07R4hKtuVYlb+N7cQvp9cn8L",
	"6fgz2suHPaBNoG+howAVtIc24a66WpMgQ/RLmkw0vnTRhvPaf41miyxcK+alwu9sg0qQFVr6IHxsGvS+",
	"jVpwtLBEjoosy4mnAD+OMwminJbYSjWWDRXYqLXcaoQ6cMQFntK2w02+anWiJC1uHRsZoAYlAz4OZPAa",
	"vGKP19lSlz3hD7RPGpLSCYOjtem0KiugMaBK0krSqD5C1j+Yug75d/S9s37hzj0cWB/TRigwqI7O2Tqn",
	"Udql2oZ8G1qXV1NITMIL7qIX+Sa8ePMaKviA7IsDNqsnq02CcT1a2RPU8Gy1WT2DEn65j3UpNo87zD49",
	"WCR1AK8wzNnjE8MjJ3nL081mTKCAxeWy7zU1ef/6nS/GLEGSRhTQ5I2X8uYo62YOJLPcFQr+6fNfyIdy",
	"jVIqRUZVnD41lnb4aIzkXWlHSK3Pl0xErPekhuvYyDyyNBiQfU5dSgXlh6UCK01WW2XO3kfKMhfnz4Rc",
	"8sdw94lsX0vyOak3Mz1CYZCkfdLi+eb5ZyugBMsSdoG1LojWRasWFPQ9NtRScyzjXOepmus5Lf5d1DHQ",
	"v3ppSxsPSpunT97l/5XCJ1XOik+ePRV5zNIc1c4vyDxm+he9v08/q8inr9RDah+emaN/FHr3BeVOwD/8",
	"B8CpeakZpdqJ8Z/B6Hnyx06avTdSKoy0UY7PxLL/huHvAAAA//8XEi9TAA0AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
