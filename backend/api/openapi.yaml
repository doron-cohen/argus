openapi: 3.0.3
info:
  title: Argus API
  version: 0.1.0
  description: API for managing and discovering components from various sources
paths:
  /components:
    get:
      summary: Get all components
      description: Retrieve a list of all components discovered from configured sources
      operationId: getComponents
      responses:
        "200":
          description: List of components
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Component"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /components/{componentId}:
    get:
      summary: Get component by ID
      description: Retrieve a specific component by its unique identifier
      operationId: getComponentById
      parameters:
        - name: componentId
          in: path
          required: true
          description: Unique identifier of the component
          schema:
            type: string
          example: "auth-service"
      responses:
        "200":
          description: Component details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Component"
        "404":
          description: Component not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /components/{componentId}/reports:
    get:
      summary: Get check reports for component
      description: Retrieve quality check reports for a specific component
      operationId: getComponentReports
      parameters:
        - name: componentId
          in: path
          required: true
          description: Unique identifier of the component
          schema:
            type: string
          example: "auth-service"
        - name: latest_only
          in: query
          required: false
          description: If true, return only the latest report for each check type
          schema:
            type: boolean
            default: false
          example: false
      responses:
        "200":
          description: List of check reports for the component
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CheckReport"
        "404":
          description: Component not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /healthz:
    get:
      summary: Health check
      description: Check the health status of the API
      operationId: getHealth
      responses:
        "200":
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Health"
components:
  schemas:
    Component:
      type: object
      description: A component discovered from a source
      properties:
        id:
          type: string
          description: Unique identifier for the component. If not provided, the name will be used as the identifier.
          example: "auth-service"
        name:
          type: string
          description: Human-readable name of the component
          example: "Authentication Service"
        description:
          type: string
          description: Additional context about the component's purpose and functionality
          example: "Handles user authentication and authorization"
        owners:
          $ref: "#/components/schemas/Owners"
      required:
        - name
    Owners:
      type: object
      description: Ownership information for a component
      properties:
        maintainers:
          type: array
          description: List of user identifiers responsible for maintaining this component
          items:
            type: string
          example: ["alice@company.com", "@bob-github"]
        team:
          type: string
          description: Team responsible for owning this component
          example: "Platform Team"
    Health:
      type: object
      description: Health status of the service
      properties:
        status:
          type: string
          description: Health status
          enum: ["healthy", "unhealthy"]
          example: "healthy"
        timestamp:
          type: string
          format: date-time
          description: Timestamp of the health check
          example: "2023-12-01T10:00:00Z"
      required:
        - status
        - timestamp
    Error:
      type: object
      description: Error response
      properties:
        error:
          type: string
          description: Error message
          example: "Internal server error"
        code:
          type: string
          description: Error code
          example: "INTERNAL_ERROR"
      required:
        - error
    CheckReport:
      type: object
      description: A quality check report for a component
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the report
          example: "550e8400-e29b-41d4-a716-446655440000"
        check:
          $ref: "#/components/schemas/Check"
        status:
          type: string
          description: Status of the check execution
          enum:
            [
              "pass",
              "fail",
              "disabled",
              "skipped",
              "unknown",
              "error",
              "completed",
            ]
          example: "pass"
        timestamp:
          type: string
          format: date-time
          description: When the check was executed
          example: "2024-01-15T10:30:00Z"
        details:
          type: object
          description: Check-specific data (coverage %, warnings, etc.)
          additionalProperties: true
          example:
            coverage_percentage: 85.5
            tests_passed: 150
            tests_failed: 0
            duration_seconds: 45
        metadata:
          type: object
          description: Execution context (CI job, environment, duration)
          additionalProperties: true
          example:
            ci_job_id: "12345"
            environment: "staging"
            branch: "main"
            commit_sha: "abc123"
            execution_duration_ms: 45000
        created_at:
          type: string
          format: date-time
          description: When the report was created
          example: "2024-01-15T10:30:00Z"
      required:
        - id
        - check
        - status
        - timestamp
    Check:
      type: object
      description: Information about a quality check
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the check
          example: "550e8400-e29b-41d4-a716-446655440001"
        slug:
          type: string
          description: Unique identifier for the check type
          example: "unit-tests"
        name:
          type: string
          description: Human-readable name for the check
          example: "Unit Tests"
        description:
          type: string
          description: Description of what the check does
          example: "Runs unit tests for the component"
        created_at:
          type: string
          format: date-time
          description: When the check was created
          example: "2024-01-15T10:30:00Z"
      required:
        - id
        - slug
        - name
