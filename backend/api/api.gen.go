// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

// Defines values for CheckReportStatus.
const (
	CheckReportStatusCompleted CheckReportStatus = "completed"
	CheckReportStatusDisabled  CheckReportStatus = "disabled"
	CheckReportStatusError     CheckReportStatus = "error"
	CheckReportStatusFail      CheckReportStatus = "fail"
	CheckReportStatusPass      CheckReportStatus = "pass"
	CheckReportStatusSkipped   CheckReportStatus = "skipped"
	CheckReportStatusUnknown   CheckReportStatus = "unknown"
)

// Defines values for GetComponentReportsParamsStatus.
const (
	GetComponentReportsParamsStatusCompleted GetComponentReportsParamsStatus = "completed"
	GetComponentReportsParamsStatusDisabled  GetComponentReportsParamsStatus = "disabled"
	GetComponentReportsParamsStatusError     GetComponentReportsParamsStatus = "error"
	GetComponentReportsParamsStatusFail      GetComponentReportsParamsStatus = "fail"
	GetComponentReportsParamsStatusPass      GetComponentReportsParamsStatus = "pass"
	GetComponentReportsParamsStatusSkipped   GetComponentReportsParamsStatus = "skipped"
	GetComponentReportsParamsStatusUnknown   GetComponentReportsParamsStatus = "unknown"
)

// CheckReport A quality check report for a component
type CheckReport struct {
	// CheckSlug Unique identifier for the check type
	CheckSlug string `json:"check_slug"`

	// Id Unique identifier for the report
	Id string `json:"id"`

	// Status Status of the check execution
	Status CheckReportStatus `json:"status"`

	// Timestamp When the check was executed
	Timestamp time.Time `json:"timestamp"`
}

// CheckReportStatus Status of the check execution
type CheckReportStatus string

// Component A component discovered from a source
type Component struct {
	// Description Additional context about the component's purpose and functionality
	Description *string `json:"description,omitempty"`

	// Id Unique identifier for the component. If not provided, the name will be used as the identifier.
	Id *string `json:"id,omitempty"`

	// Name Human-readable name of the component
	Name string `json:"name"`

	// Owners Ownership information for a component
	Owners *Owners `json:"owners,omitempty"`
}

// ComponentReportsResponse Response containing component reports with pagination
type ComponentReportsResponse struct {
	// Pagination Pagination metadata for list responses
	Pagination Pagination `json:"pagination"`

	// Reports List of check reports for the component
	Reports []CheckReport `json:"reports"`
}

// Error Error response
type Error struct {
	// Code Error code
	Code *string `json:"code,omitempty"`

	// Error Error message
	Error string `json:"error"`
}

// Owners Ownership information for a component
type Owners struct {
	// Maintainers List of user identifiers responsible for maintaining this component
	Maintainers *[]string `json:"maintainers,omitempty"`

	// Team Team responsible for owning this component
	Team *string `json:"team,omitempty"`
}

// Pagination Pagination metadata for list responses
type Pagination struct {
	// HasMore Whether there are more items available
	HasMore bool `json:"has_more"`

	// Limit Number of items returned in this response
	Limit int `json:"limit"`

	// Offset Offset used for this response
	Offset int `json:"offset"`

	// Total Total number of items available
	Total int `json:"total"`
}

// GetComponentReportsParams defines parameters for GetComponentReports.
type GetComponentReportsParams struct {
	// Status Filter by check status
	Status *GetComponentReportsParamsStatus `form:"status,omitempty" json:"status,omitempty"`

	// CheckSlug Filter by specific check type
	CheckSlug *string `form:"check_slug,omitempty" json:"check_slug,omitempty"`

	// Since Filter reports since timestamp (ISO 8601)
	Since *time.Time `form:"since,omitempty" json:"since,omitempty"`

	// Limit Number of reports to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Pagination offset
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// LatestPerCheck Return only the latest report for each check type
	LatestPerCheck *bool `form:"latest_per_check,omitempty" json:"latest_per_check,omitempty"`
}

// GetComponentReportsParamsStatus defines parameters for GetComponentReports.
type GetComponentReportsParamsStatus string

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all components
	// (GET /catalog/v1/components)
	GetComponents(w http.ResponseWriter, r *http.Request)
	// Get component by ID
	// (GET /catalog/v1/components/{componentId})
	GetComponentById(w http.ResponseWriter, r *http.Request, componentId string)
	// Get reports for component
	// (GET /catalog/v1/components/{componentId}/reports)
	GetComponentReports(w http.ResponseWriter, r *http.Request, componentId string, params GetComponentReportsParams)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Get all components
// (GET /catalog/v1/components)
func (_ Unimplemented) GetComponents(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get component by ID
// (GET /catalog/v1/components/{componentId})
func (_ Unimplemented) GetComponentById(w http.ResponseWriter, r *http.Request, componentId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get reports for component
// (GET /catalog/v1/components/{componentId}/reports)
func (_ Unimplemented) GetComponentReports(w http.ResponseWriter, r *http.Request, componentId string, params GetComponentReportsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetComponents operation middleware
func (siw *ServerInterfaceWrapper) GetComponents(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetComponents(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetComponentById operation middleware
func (siw *ServerInterfaceWrapper) GetComponentById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "componentId" -------------
	var componentId string

	err = runtime.BindStyledParameterWithOptions("simple", "componentId", chi.URLParam(r, "componentId"), &componentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "componentId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetComponentById(w, r, componentId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetComponentReports operation middleware
func (siw *ServerInterfaceWrapper) GetComponentReports(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "componentId" -------------
	var componentId string

	err = runtime.BindStyledParameterWithOptions("simple", "componentId", chi.URLParam(r, "componentId"), &componentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "componentId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComponentReportsParams

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	// ------------- Optional query parameter "check_slug" -------------

	err = runtime.BindQueryParameter("form", true, false, "check_slug", r.URL.Query(), &params.CheckSlug)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "check_slug", Err: err})
		return
	}

	// ------------- Optional query parameter "since" -------------

	err = runtime.BindQueryParameter("form", true, false, "since", r.URL.Query(), &params.Since)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "since", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "latest_per_check" -------------

	err = runtime.BindQueryParameter("form", true, false, "latest_per_check", r.URL.Query(), &params.LatestPerCheck)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "latest_per_check", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetComponentReports(w, r, componentId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/catalog/v1/components", wrapper.GetComponents)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/catalog/v1/components/{componentId}", wrapper.GetComponentById)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/catalog/v1/components/{componentId}/reports", wrapper.GetComponentReports)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"qCvo/+2obUfd9pB0u/rDnwEAAP//DS63aRIXAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
