// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for CheckReportStatus.
const (
	CheckReportStatusCompleted CheckReportStatus = "completed"
	CheckReportStatusDisabled  CheckReportStatus = "disabled"
	CheckReportStatusError     CheckReportStatus = "error"
	CheckReportStatusFail      CheckReportStatus = "fail"
	CheckReportStatusPass      CheckReportStatus = "pass"
	CheckReportStatusSkipped   CheckReportStatus = "skipped"
	CheckReportStatusUnknown   CheckReportStatus = "unknown"
)

// Defines values for HealthStatus.
const (
	Healthy   HealthStatus = "healthy"
	Unhealthy HealthStatus = "unhealthy"
)

// Check Information about a quality check
type Check struct {
	// CreatedAt When the check was created
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Description Description of what the check does
	Description *string `json:"description,omitempty"`

	// Id Unique identifier for the check
	Id openapi_types.UUID `json:"id"`

	// Name Human-readable name for the check
	Name string `json:"name"`

	// Slug Unique identifier for the check type
	Slug string `json:"slug"`
}

// CheckReport A quality check report for a component
type CheckReport struct {
	// Check Information about a quality check
	Check Check `json:"check"`

	// CreatedAt When the report was created
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Details Check-specific data (coverage %, warnings, etc.)
	Details *map[string]interface{} `json:"details,omitempty"`

	// Id Unique identifier for the report
	Id openapi_types.UUID `json:"id"`

	// Metadata Execution context (CI job, environment, duration)
	Metadata *map[string]interface{} `json:"metadata,omitempty"`

	// Status Status of the check execution
	Status CheckReportStatus `json:"status"`

	// Timestamp When the check was executed
	Timestamp time.Time `json:"timestamp"`
}

// CheckReportStatus Status of the check execution
type CheckReportStatus string

// Component A component discovered from a source
type Component struct {
	// Description Additional context about the component's purpose and functionality
	Description *string `json:"description,omitempty"`

	// Id Unique identifier for the component. If not provided, the name will be used as the identifier.
	Id *string `json:"id,omitempty"`

	// Name Human-readable name of the component
	Name string `json:"name"`

	// Owners Ownership information for a component
	Owners *Owners `json:"owners,omitempty"`
}

// Error Error response
type Error struct {
	// Code Error code
	Code *string `json:"code,omitempty"`

	// Error Error message
	Error string `json:"error"`
}

// Health Health status of the service
type Health struct {
	// Status Health status
	Status HealthStatus `json:"status"`

	// Timestamp Timestamp of the health check
	Timestamp time.Time `json:"timestamp"`
}

// HealthStatus Health status
type HealthStatus string

// Owners Ownership information for a component
type Owners struct {
	// Maintainers List of user identifiers responsible for maintaining this component
	Maintainers *[]string `json:"maintainers,omitempty"`

	// Team Team responsible for owning this component
	Team *string `json:"team,omitempty"`
}

// GetComponentReportsParams defines parameters for GetComponentReports.
type GetComponentReportsParams struct {
	// LatestOnly If true, return only the latest report for each check type
	LatestOnly *bool `form:"latest_only,omitempty" json:"latest_only,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all components
	// (GET /components)
	GetComponents(w http.ResponseWriter, r *http.Request)
	// Get component by ID
	// (GET /components/{componentId})
	GetComponentById(w http.ResponseWriter, r *http.Request, componentId string)
	// Get check reports for component
	// (GET /components/{componentId}/reports)
	GetComponentReports(w http.ResponseWriter, r *http.Request, componentId string, params GetComponentReportsParams)
	// Health check
	// (GET /healthz)
	GetHealth(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Get all components
// (GET /components)
func (_ Unimplemented) GetComponents(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get component by ID
// (GET /components/{componentId})
func (_ Unimplemented) GetComponentById(w http.ResponseWriter, r *http.Request, componentId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get check reports for component
// (GET /components/{componentId}/reports)
func (_ Unimplemented) GetComponentReports(w http.ResponseWriter, r *http.Request, componentId string, params GetComponentReportsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Health check
// (GET /healthz)
func (_ Unimplemented) GetHealth(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetComponents operation middleware
func (siw *ServerInterfaceWrapper) GetComponents(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetComponents(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetComponentById operation middleware
func (siw *ServerInterfaceWrapper) GetComponentById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "componentId" -------------
	var componentId string

	err = runtime.BindStyledParameterWithOptions("simple", "componentId", chi.URLParam(r, "componentId"), &componentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "componentId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetComponentById(w, r, componentId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetComponentReports operation middleware
func (siw *ServerInterfaceWrapper) GetComponentReports(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "componentId" -------------
	var componentId string

	err = runtime.BindStyledParameterWithOptions("simple", "componentId", chi.URLParam(r, "componentId"), &componentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "componentId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComponentReportsParams

	// ------------- Optional query parameter "latest_only" -------------

	err = runtime.BindQueryParameter("form", true, false, "latest_only", r.URL.Query(), &params.LatestOnly)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "latest_only", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetComponentReports(w, r, componentId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetHealth operation middleware
func (siw *ServerInterfaceWrapper) GetHealth(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHealth(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/components", wrapper.GetComponents)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/components/{componentId}", wrapper.GetComponentById)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/components/{componentId}/reports", wrapper.GetComponentReports)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/healthz", wrapper.GetHealth)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYf2/bOBL9KgTvDtcDZEd27F7XfzWbBhsDRRu4KRbYojDG0shiKpEKfyR1C3/3BUnJ",
	"kizFcZAW2AX2P4kiZx5n3rwh9Z1GIi8ER64VnX2nKkoxB/d4nmL0xT7EqCLJCs0EpzM654mQOdg3Aith",
	"NAFyayBjekMitySghRQFSs3QGYokgsZ4Cbpr7fcUOdEp+qXkHhQpp9OA4lfIiwzpjI7D8WQQjgaj6fUo",
	"nJ2GszD8gwbUI6EzGoPGgWY50oDqTWGXKC0ZX9Nt0Pa4D+BN/UZEQu5T0A08sUDVArIwXBHDmSYalVYk",
	"EdJPr6LYB4DFXb8fObs1SFiMXLOEoaxNlUGsnU6nIb6ahOEAx7+sBpNRPBnA/0cvB5PJy5fT6WQShuGo",
	"GQ1jWNyHg0OOXSSXJgc+kAgxrDIkdtIBLB/t3q/t3vs8qMysn7xX4sw0ndgAD3S/k21AJd4aJjGms0/U",
	"7dS5Lff3ebdCrG4w0haWo/ICCyF7KHjWpi+Rbp6DCK287rG6Ko9/S0zojP7rpK6kk7KMTnwNbYPjaqD0",
	"/JOKQAPLHHKIY2ZdQ3bV2JGWBvdqxcdtoAqMWMIiEoMG8iISdyhhjeQ/AbkHyRlfq4Cgjob/a8K1yuIn",
	"LguUEXINa6SzV9PhNKCxkU5BlgojwWNFZ5NpQF3GlwmwzOY2rAYKUMoOjKbhtie5T6suH+Onlld4THnl",
	"qMGG6GkxvviKkXHyEwmu8asmL87n5EasAoL8jknBc+Q6IFXI9oK8ksCjlM5oDozTgEZseSNWSxsUOhqf",
	"TqZ2TOQ500uVAp1RWEWj8ak1Ult324C13Yc1XgJa7rKUuwSFYW/8lQZtVDcHH9y4FdW60ne2nX+T2wq2",
	"6bXhBZbRgMZMWRlyVf2FFYV7MvwLF/dukZRC+i0VGdoK+dxMZWmrkxpbFUpDXhzVgTzKH1d9fZJVKWsZ",
	"vSbEXgXb6VCPfu2Eh8RMuarDmCRS5ASIEkZG2FGvgz3xbEfeHSd9p291uv8qUhhZCIUEeEwSwyO/iOlN",
	"K3KXwOMMFTEKJQGjU1uUUXmC4LEbEpJ9g5IYz+2fFcAhmSeEC00KKe5YjHHgvrsGd8+yjKzQYooJKPeh",
	"tjVs4bf4BgrlHYvweW21qoVGU6ndnLUj8+Fhh+Keo1SP9Z73ftY++x5skheutDr7cMNEoioEV10iRSLG",
	"hxa5b80tzt9dXyzenb1dXiwW7xd9W8NDIHJUyjaRlkmuUVqm2gShJJVAHC5BP6svCpcImU570unGiWqJ",
	"Wk2KdlAeksSWkYYEpm5845Suem7pWj3hKdJ2XX2q8HozPae6cTg+HYzGg3BkxS18hrgdqWfvdxRuQ/bj",
	"KSsIa9wzHjuL2d6ngfWbfMuUtgFw8lPXuKo4zWx5Wg+VFcbXRKdM9dfpJwoZi/C1/Qh8M4xETgP6eiVW",
	"gzXTqVnZ/TKNuYPSTZcfAClh494R8p7MIeQdfOL+EWj0KgNto0bs+t5U7SXCDtlA9/SAq3kZFO4OBk6p",
	"q/Zi32vF8a3mDiQTRpUNxzNAe2GTa6PI2dWcBvQOpfIOwuFoGDo1K5BDweiMng7DoT2ZFKBTF72T9uV0",
	"jT3tb4FaMrxDAiQrMw1Z1oS33xQjwRO2Nva9Bmvp5Mg2tyen31Cf164tw738ORjjMPTKx3XZkKEoslK3",
	"T26Ub6lehu3TjgwHbwq7hHZIst2/w+4o3QjPNqDTJ+I6BMc3gx7X/Xpr5ymT5yA3Pnp7OXATmn6+757n",
	"8faY3O4uIfVhZ7UhTLvbePskcDCbv27msaOYhBy1E4xPj58tDjbuvfMB4+4gqtPqRjqjjc3Splz6+0Cd",
	"kf16/fxM5h1JuG6Wz+sTZXlv3AZ0Ek5+Pr9qz/bklgjD478ct1sUnL85TO4Tf+M8QsD6fkOosvd16X+Q",
	"5YvS59+F6EHnL2NC3BoiURvJieDZxiHLQKPSzZ80CFH6wI+kBDKFJdBbg3JTI/V2ltYubSKLMQGT6d3a",
	"EulKiAyB/4CaPK4bNH5YPaUfdJjTTuY/Rdwo4k6sGnGyBe0Py98erNtzT7n6WN2+G/jzTqdEy/vFTxT2",
	"0kNPaMorJWGKVBeKdlwum/eD7Xa7/TMAAP//YYCu9B8YAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
