// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

// Defines values for CheckReportStatus.
const (
	CheckReportStatusCompleted CheckReportStatus = "completed"
	CheckReportStatusDisabled  CheckReportStatus = "disabled"
	CheckReportStatusError     CheckReportStatus = "error"
	CheckReportStatusFail      CheckReportStatus = "fail"
	CheckReportStatusPass      CheckReportStatus = "pass"
	CheckReportStatusSkipped   CheckReportStatus = "skipped"
	CheckReportStatusUnknown   CheckReportStatus = "unknown"
)

// Defines values for HealthStatus.
const (
	Healthy   HealthStatus = "healthy"
	Unhealthy HealthStatus = "unhealthy"
)

// Defines values for GetComponentReportsParamsStatus.
const (
	GetComponentReportsParamsStatusCompleted GetComponentReportsParamsStatus = "completed"
	GetComponentReportsParamsStatusDisabled  GetComponentReportsParamsStatus = "disabled"
	GetComponentReportsParamsStatusError     GetComponentReportsParamsStatus = "error"
	GetComponentReportsParamsStatusFail      GetComponentReportsParamsStatus = "fail"
	GetComponentReportsParamsStatusPass      GetComponentReportsParamsStatus = "pass"
	GetComponentReportsParamsStatusSkipped   GetComponentReportsParamsStatus = "skipped"
	GetComponentReportsParamsStatusUnknown   GetComponentReportsParamsStatus = "unknown"
)

// CheckReport A quality check report for a component
type CheckReport struct {
	// CheckSlug Unique identifier for the check type
	CheckSlug string `json:"check_slug"`

	// Id Unique identifier for the report
	Id string `json:"id"`

	// Status Status of the check execution
	Status CheckReportStatus `json:"status"`

	// Timestamp When the check was executed
	Timestamp time.Time `json:"timestamp"`
}

// CheckReportStatus Status of the check execution
type CheckReportStatus string

// Component A component discovered from a source
type Component struct {
	// Description Additional context about the component's purpose and functionality
	Description *string `json:"description,omitempty"`

	// Id Unique identifier for the component. If not provided, the name will be used as the identifier.
	Id *string `json:"id,omitempty"`

	// Name Human-readable name of the component
	Name string `json:"name"`

	// Owners Ownership information for a component
	Owners *Owners `json:"owners,omitempty"`
}

// ComponentReportsResponse Response containing component reports with pagination
type ComponentReportsResponse struct {
	// Pagination Pagination metadata for list responses
	Pagination Pagination `json:"pagination"`

	// Reports List of check reports for the component
	Reports []CheckReport `json:"reports"`
}

// Error Error response
type Error struct {
	// Code Error code
	Code *string `json:"code,omitempty"`

	// Error Error message
	Error string `json:"error"`
}

// Health Health status of the service
type Health struct {
	// Status Health status
	Status HealthStatus `json:"status"`

	// Timestamp Timestamp of the health check
	Timestamp time.Time `json:"timestamp"`
}

// HealthStatus Health status
type HealthStatus string

// Owners Ownership information for a component
type Owners struct {
	// Maintainers List of user identifiers responsible for maintaining this component
	Maintainers *[]string `json:"maintainers,omitempty"`

	// Team Team responsible for owning this component
	Team *string `json:"team,omitempty"`
}

// Pagination Pagination metadata for list responses
type Pagination struct {
	// HasMore Whether there are more items available
	HasMore bool `json:"has_more"`

	// Limit Number of items returned in this response
	Limit int `json:"limit"`

	// Offset Offset used for this response
	Offset int `json:"offset"`

	// Total Total number of items available
	Total int `json:"total"`
}

// GetComponentReportsParams defines parameters for GetComponentReports.
type GetComponentReportsParams struct {
	// Status Filter by check status
	Status *GetComponentReportsParamsStatus `form:"status,omitempty" json:"status,omitempty"`

	// CheckSlug Filter by specific check type
	CheckSlug *string `form:"check_slug,omitempty" json:"check_slug,omitempty"`

	// Since Filter reports since timestamp (ISO 8601)
	Since *time.Time `form:"since,omitempty" json:"since,omitempty"`

	// Limit Number of reports to return default 50 max 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Pagination offset
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetComponentReportsParamsStatus defines parameters for GetComponentReports.
type GetComponentReportsParamsStatus string

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all components
	// (GET /components)
	GetComponents(w http.ResponseWriter, r *http.Request)
	// Get component by ID
	// (GET /components/{componentId})
	GetComponentById(w http.ResponseWriter, r *http.Request, componentId string)
	// Get reports for component
	// (GET /components/{componentId}/reports)
	GetComponentReports(w http.ResponseWriter, r *http.Request, componentId string, params GetComponentReportsParams)
	// Health check
	// (GET /healthz)
	GetHealth(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Get all components
// (GET /components)
func (_ Unimplemented) GetComponents(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get component by ID
// (GET /components/{componentId})
func (_ Unimplemented) GetComponentById(w http.ResponseWriter, r *http.Request, componentId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get reports for component
// (GET /components/{componentId}/reports)
func (_ Unimplemented) GetComponentReports(w http.ResponseWriter, r *http.Request, componentId string, params GetComponentReportsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Health check
// (GET /healthz)
func (_ Unimplemented) GetHealth(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetComponents operation middleware
func (siw *ServerInterfaceWrapper) GetComponents(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetComponents(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetComponentById operation middleware
func (siw *ServerInterfaceWrapper) GetComponentById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "componentId" -------------
	var componentId string

	err = runtime.BindStyledParameterWithOptions("simple", "componentId", chi.URLParam(r, "componentId"), &componentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "componentId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetComponentById(w, r, componentId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetComponentReports operation middleware
func (siw *ServerInterfaceWrapper) GetComponentReports(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "componentId" -------------
	var componentId string

	err = runtime.BindStyledParameterWithOptions("simple", "componentId", chi.URLParam(r, "componentId"), &componentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "componentId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComponentReportsParams

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	// ------------- Optional query parameter "check_slug" -------------

	err = runtime.BindQueryParameter("form", true, false, "check_slug", r.URL.Query(), &params.CheckSlug)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "check_slug", Err: err})
		return
	}

	// ------------- Optional query parameter "since" -------------

	err = runtime.BindQueryParameter("form", true, false, "since", r.URL.Query(), &params.Since)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "since", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetComponentReports(w, r, componentId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetHealth operation middleware
func (siw *ServerInterfaceWrapper) GetHealth(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHealth(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/components", wrapper.GetComponents)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/components/{componentId}", wrapper.GetComponentById)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/components/{componentId}/reports", wrapper.GetComponentReports)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/healthz", wrapper.GetHealth)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
